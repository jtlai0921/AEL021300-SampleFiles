## Python Codes for Chapter 4: Logical Operations and Flow Control

#########

a = np.array([False, True, False, True])
a

a = np.array([False, True, False, True])
a

np.array(a, dtype = int)

np.array(a, dtype = float)


x = [-2.2, -1, 0, 1, 2.2]
np.array(x, dtype = bool)

a = np.array([False, True, False, True])
b = np.array([False, True, True, False])

~a; np.logical_not(a)  # logical NOT

a & b; np.logical_and(a, b)  # logical AND

a | b; np.logical_or(a , b)  # logical OR

np.logical_xor(a, b)

x = np.array([1, np.NaN, np.Inf], float)
x

np.isnan(x)  # Is NaN ("not a number")?

np.isfinite(x)  # Is finite?

np.isreal(x)  # Is real?

np.iscomplex(x)  # Is complex?

a = np.array([1, 2, 3, 4])

2 in a  # membership test

0 in a

[2, 3] in a

(2, 3) in a

np.array([2, 3]) in a

b = np.array([[1, 2], [3, 4], [5, 6]], float)

[1, 2] in b

[4, 3] in b

a = np.array([1, 3, 0], float)
a

(a > 0) & (a < 3)  # logical AND

np.logical_and(a > 0, a < 3)  # logical AND

a > 0 and a < 3  # invalid statement

0 < a < 3  # invalid statement

x = np.array([-1.2, 0.5, 1.0, 1.3, 2.4, 5, 6.3])

np.any((1 < x) & (x < 5))

np.any(1 < x) & np.any(x < 5)

np.all((1 < x) & (x < 5))

np.all(1 < x) & np.all(x < 5)

a = np.array([[0, 1], [3, 0]], float)
a

np.nonzero(a); a.nonzero()  # indices of nonzero values in an array

a[np.nonzero(a)]

x = np.array([1.2, -3.4, 5.7, -6, 0, 3])

u = np.where(x >= 1)
u

type(u)

np.shape(u)

x[np.where(x >= 1)]

np.where((x >= 1) & (x <= 4))

np.where(np.logical_and(x >= 1, x <= 4))

v = np.where(x >= 6)
v

type(v)

np.shape(v)

np.shape(np.where(x >= 1))[1]

np.shape(np.where(x >= 6))[1]

np.shape(np.where(x >= 1))[1] == 0  # empty set?

np.shape(np.where(x >= 6))[1] == 0  # empty set?

a = np.array([[1, 3], [2, 4]])
a

a > 2.5

a[a > 2.5]  # Return an array with only the True elements.

status = a > 2.5
a[status]

np.sum(a > 2.5)

a = np.array([1, 3, 0], float)
b = np.array([0, 3, 2], float)

a > b

a == b 

a <= b 

c = a > b  # now a Boolean array
c

a > 2  # with broadcasting

a = np.array([[1, 2], [3, 4]])
b = np.array([[1, 2.00000001], [3.00000001, 4]])

np.isclose(a, b)

np.allclose(a, b)

x = 5
y = 2
if x == 5:
	y = y + 3

y

x = 2.5; y = 4.7

if x < y:
	z = x
else:
	z = y

z

min(x, y)

x = np.array([192, 174, 185, 160, 145, 183, 166, 178, 195, 155])
y = np.array(["unknown"]*10, dtype = str)

for i in range(10):
	if x[i] >= 180:
		y[i] = "high"
	elif x[i] < 160:
		y[i] = "short"
	else:
		y[i] = "medium"

y

x = np.array([-1.5, 0, 1.5])

np.where(x >= 0, x, -x)

np.abs(x)

def f(status):
	stability = np.where(status, "undetermined", False)
	return stability

def g(status):
	if status:
		stability = "undetermined"
	else:
		stability = False
	return stability

x = 5

f1 = f(x > 0); f1; type(f1)

f2 = f(x < 0); f2; type(f2)

g1 = g(x > 0); g1; type(g1)

g2 = g(x < 0); g2; type(g2)

x = np.array([192, 174, 185, 160, 145, 183, 166, 178, 195, 155])
y = np.array(["unknown"]*10, dtype = str)

for i in range(10):
	if x[i] >= 190:
		y[i] = "high"
	elif x[i] > 180:
		# do nothing            
	elif x[i] < 160:            
		y[i] = "short"
 	else:
 		y[i] = "medium"

for i in range(10):
	if x[i] >= 190:
		y[i] = "high"
	elif x[i] > 180:
		# do nothing
		continue
	elif x[i] < 160: 
		y[i] = "short"
	else:
		y[i] = "medium"

y

x = np.zeros(5)
x[0] = 0.2
for k in range(1, 5):
	x[k] = 4 * x[k-1] * (1 - x[k-1])

np.round(x, 4)

x = np.arange(1, 11)
x

odd = np.arange(0, 10, 2)

even = np.arange(1, 11, 2)
odd_sum = even_sum = 0

for i in odd:
	odd_sum = odd_sum + x[i]

for j in even:
	even_sum = even_sum + x[j]

odd_sum - even_sum

np.sum(x[odd]) - np.sum(x[even])

myset = np.arange(5)
for myidx in myset:
	print(myidx)
	myidx = 2

myidx

x = np.array([1.2, 3.4, 2.1, 4.3, 3.2, 5.5, 6.7])

total = x[0]
count = 0

while total <= 12:
	count = count + 1
	total = total + x[count]

count

y = np.cumsum(x)
y

y <= 12

np.sum(y <= 12)

A = np.array(np.arange(1, 10)).reshape(3, 3)
A

index = np.array([[0, 0], [1, 1], [2, 2]])

trace = 0
for (i, j) in index:
	trace = trace + A[i, j]

trace

np.sum(np.diag(A))

#########
